{"version":3,"sources":["components/AddCategory.js","helpers/getgifs.js","hooks/useFetchGifs.js","components/GifItem.js","components/GifContainer.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","onChange","target","value","placeholder","type","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifItem","className","src","alt","GifContainer","key","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,0BAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,sCACA,2BACEO,SAfc,SAAAL,GAClBF,EAAcE,EAAEM,OAAOC,QAenBC,YAAY,sCACZD,MAAOV,EACPY,KAAK,W,uBCvBAC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,mEAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAVjB,kBAcdM,GAdc,4CAAH,sDCqBLM,MAlBf,SAAsBd,GACpB,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNQ,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRnB,EAAQC,GAAUmB,MAAK,SAAAC,GACrBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACf,IAEGgB,GChBIK,EAAU,SAAC,GAAa,IAAXnB,EAAU,EAAVA,IACxB,OACE,yBAAKoB,UAAU,8CACb,yBAAKC,IAAKrB,EAAKsB,IAAI,YCDZC,EAAe,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACfY,EAAWE,EAAad,GAA9BO,KAER,OACE,oCACE,4BAAKP,GACL,yBAAKsB,UAAU,aACZV,EAAOH,KAAI,SAAAC,GAAG,OACb,kBAAC,EAAD,eAASgB,IAAKhB,EAAIC,IAAQD,UCTrB,SAASiB,IACtB,MAAoC1C,mBAAS,CAAC,UAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KACA,OACE,oCACE,wBAAIsC,UAAU,SAAd,WACA,kBAAC,EAAD,CAAatC,cAAeA,IAC5B,4BACG4C,EAAWnB,KAAI,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CAAc0B,IAAK1B,EAAUA,SAAUA,SCNjD6B,IAASC,OAAO,kBAACH,EAAD,MAAYI,SAASC,eAAe,U","file":"static/js/main.6492a49d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const hanldeInput = e => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(cats => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>Search</h2>\r\n      <input\r\n        onChange={hanldeInput}\r\n        placeholder=\"Type the gif you want to search for\"\r\n        value={inputValue}\r\n        type=\"text\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async category => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}+Man&limit=12&api_key=OEBGfCKkosTze8UazFaT0OliOEwMWSmZ`;\r\n\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getgifs';\r\n\r\nfunction useFetchGifs(category) {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(imgs => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n}\r\n\r\nexport default useFetchGifs;\r\n","import React from 'react';\r\n\r\nexport const GifItem = ({ url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__backInLeft\">\r\n      <img src={url} alt=\"title\" />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\nimport { GifItem } from './GifItem';\r\n\r\nexport const GifContainer = ({ category }) => {\r\n  const { data: images } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      <div className=\"card-grid\">\r\n        {images.map(img => (\r\n          <GifItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifContainer } from './components/GifContainer';\r\nexport default function GifApp() {\r\n  const [categories, setCategories] = useState(['Memes']);\r\n  return (\r\n    <>\r\n      <h1 className=\"title\">Gif App</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <ol>\r\n        {categories.map(category => (\r\n          <GifContainer key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifApp from './GifApp';\n\nReactDOM.render(<GifApp />, document.getElementById('root'));\n"],"sourceRoot":""}